name: Update README with Latest Blog Posts

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:     # Allow manual triggering

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install python3 python3-pip -y
          pip3 install requests beautifulsoup4 lxml

      - name: Fetch sitemap and extract blog post URLs
        run: |
          python3 - <<EOF
          import requests
          from bs4 import BeautifulSoup

          sitemap_url = 'https://www.instilllearning.com/sitemap.xml'
          response = requests.get(sitemap_url)
          soup = BeautifulSoup(response.content, 'xml')

          urls = [url.text for url in soup.find_all('loc')]
          blog_post_urls = [url for url in urls if '/blog/' in url][:10]  # Get top 10 blog posts

          # Reverse the order of blog_post_urls list
          blog_post_urls.reverse()  # This line reverses the order

          with open('blog_post_urls.txt', 'w') as f:
              for url in blog_post_urls:
                  f.write(url + '\n')
          EOF

      - name: Fetch blog post titles and images
        run: |
          python3 - <<EOF
          import requests
          from bs4 import BeautifulSoup

          with open('blog_post_urls.txt', 'r') as f:
              blog_post_urls = f.read().splitlines()

          blog_posts = []
          for url in blog_post_urls:
              response = requests.get(url)
              soup = BeautifulSoup(response.content, 'html.parser')
              title = soup.find('title').text.strip()

              # Try to find OpenGraph image first
              image = soup.find('meta', property='og:image')
              if image:
                  image_url = image['content']
              else:
                  # If not found, use the first image in the post
                  image = soup.find('img')
                  image_url = image['src'] if image else None

              blog_posts.append((url, title, image_url))

          print(f"Blog posts: {blog_posts}")

          with open('blog_posts.txt', 'w') as f:
              for url, title, image_url in blog_posts:
                  f.write(f"{url}|{title}|{image_url}\n")
          EOF

      - name: Update README.md
        run: |
          cat <<EOF > update_readme.py
          import re

          with open('blog_posts.txt', 'r') as f:
              blog_posts = [line.split('|') for line in f.read().splitlines()]

          with open('README.md', 'r') as f:
              readme_content = f.read()

          # Create new blog section
          new_blog_posts_section = "## ðŸ“š Latest blog on https://instilllearning.com\n\n"
          for url, title, image_url in blog_posts:
              if image_url:
                  new_blog_posts_section += f'<a href="{url}"><img src="{image_url}" alt="{title}" width="100" align="left" hspace="10" vspace="10"></a>'
              new_blog_posts_section += f"<p>**[{title}]({url})**</p>\n<br />"

          # Add an extra new line at the end of the blog posts section
          new_blog_posts_section += "\n"

          # Ensure to keep everything after the blog section
          updated_readme_content = re.sub(
              r'## ðŸ“š Latest blog on https://instilllearning.com\n\n.*?(?=##|$)', 
              new_blog_posts_section, 
              readme_content, 
              flags=re.DOTALL
          )

          with open('README.md', 'w') as f:
              f.write(updated_readme_content)
          EOF

          python3 update_readme.py

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add README.md blog_post_urls.txt blog_posts.txt
          git commit -m 'Update Recent Blog Posts section' || echo "No changes to commit"
          git pull --rebase origin main || echo "Failed to pull with rebase"
          git push
